// Generated by CoffeeScript 1.3.3
(function() {
  var math,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define("revigred.controller", [], function() {
    var Controller, views;
    views = namespace("revigred.views");
    Controller = (function() {

      function Controller() {
        this._node_views = {};
      }

      Controller.prototype.get_node_view = function(node) {
        var _base, _name, _ref;
        return (_ref = (_base = this._node_views)[_name = node.id]) != null ? _ref : _base[_name] = new views.NodeView({
          model: node
        });
      };

      return Controller;

    })();
    return this.instance = new Controller;
  });

  define(["revigred.models.NodeModel", "revigred.models.GraphModel"], function() {
    var flow, models;
    models = namespace('revigred.models');
    flow = namespace('revigred.flow');
    flow.FlowNode = (function(_super) {

      __extends(FlowNode, _super);

      FlowNode.prototype.inputs = {};

      FlowNode.prototype.outputs = {};

      function FlowNode(options) {
        var data, name;
        FlowNode.__super__.constructor.call(this, options);
        for (name in this.inputs) {
          data = {
            name: name
          };
          _.extend(data, this.inputs[name]);
          this.add(new models.LeftConnectorModel(data));
        }
        for (name in this.outputs) {
          data = {
            name: name
          };
          _.extend(data, this.outputs[name]);
          this.add(new models.RightConnectorModel(data));
        }
      }

      return FlowNode;

    })(models.NodeModel);
    flow.SumNode = (function(_super) {

      __extends(SumNode, _super);

      function SumNode() {
        return SumNode.__super__.constructor.apply(this, arguments);
      }

      SumNode.prototype.title = "Sum";

      SumNode.prototype.inputs = {
        a: {
          title: "A"
        },
        b: {
          title: "B"
        }
      };

      SumNode.prototype.outputs = {
        result: {
          title: "A+B"
        }
      };

      return SumNode;

    })(flow.FlowNode);
    return flow.FlowGraph = (function(_super) {

      __extends(FlowGraph, _super);

      function FlowGraph() {
        return FlowGraph.__super__.constructor.apply(this, arguments);
      }

      return FlowGraph;

    })(models.GraphModel);
  });

  define([], function() {
    var math, root;
    root = namespace('revigred.gizmos');
    math = namespace('revigred.math');
    root.Gizmo = (function() {

      function Gizmo() {}

      return Gizmo;

    })();
    return root.EdgeGizmo = (function(_super) {

      __extends(EdgeGizmo, _super);

      function EdgeGizmo(connector1, connector2) {
        this.connector1 = connector1;
        this.connector2 = connector2;
      }

      EdgeGizmo.prototype.getControlPoints = function(v0, v1, v2, t) {
        var cp1, cp2, d01, d12, fa, fb;
        d01 = Math.sqrt((v1.x - v0.x) * (v1.x - v0.x) + (v1.y - v0.y) * (v1.y - v0.y));
        d12 = Math.sqrt((v2.x - v1.x) * (v2.x - v1.x) + (v2.y - v1.y) * (v2.y - v1.y));
        fa = t * d01 / (d01 + d12);
        fb = t * d12 / (d01 + d12);
        cp1 = new math.Vector(v1.x - fa * (v2.x - v0.x), v1.y - fa * (v2.y - v0.y));
        cp2 = new math.Vector(v1.x + fb * (v2.x - v0.x), v1.y + fb * (v2.y - v0.y));
        return [new math.Segment(v1, cp1), new math.Segment(v1, cp2)];
      };

      EdgeGizmo.prototype.render = function(ctx) {
        var bounds1, bounds2, c, center1, center2, cp, cur, d, edge, end, height1, height2, i, next, path, points, pos1, pos2, s_dl1, s_dl2, s_dr1, s_dr2, s_ul1, s_ul2, s_ur1, s_ur2, same_node, start, v_dl1, v_dl2, v_dr1, v_dr2, v_ul1, v_ul2, v_ur1, v_ur2, width1, width2, _i, _j, _ref, _ref1;
        pos1 = this.connector1.pos();
        pos2 = this.connector2.pos();
        start = pos1.v1;
        end = pos2.v1;
        edge = new math.Segment(start, end);
        bounds1 = this.connector1.model.node.bounds();
        width1 = bounds1.v2.x - bounds1.v1.x;
        height1 = bounds1.v2.y - bounds1.v1.y;
        center1 = new math.Vector((bounds1.v1.x + bounds1.v2.x) / 2, (bounds1.v1.y + bounds1.v2.y) / 2);
        bounds2 = this.connector2.model.node.bounds();
        width2 = bounds2.v2.x - bounds2.v1.x;
        height2 = bounds2.v2.y - bounds2.v1.y;
        center2 = new math.Vector((bounds2.v1.x + bounds2.v2.x) / 2, (bounds2.v1.y + bounds2.v2.y) / 2);
        same_node = this.connector1.model.node === this.connector2.model.node;
        if (same_node) {
          c = 0.7;
        } else {
          d = Math.sqrt(width1 * width1 + height1 * height1) + Math.sqrt(width2 * width2 + height2 * height2);
          c = Math.min(1 + d, edge.length()) / d;
        }
        ctx.strokeStyle = "rgb(0,0,0)";
        ctx.lineWidth = 2;
        ctx.beginPath();
        points = [];
        v_ur1 = new math.Vector(center1.x + width1 * c, center1.y - height1 * c);
        v_dr1 = new math.Vector(center1.x + width1 * c, center1.y + height1 * c);
        v_ul1 = new math.Vector(center1.x - width1 * c, center1.y - height1 * c);
        v_dl1 = new math.Vector(center1.x - width1 * c, center1.y + height1 * c);
        s_ur1 = new math.Segment(center1, v_ur1);
        s_dr1 = new math.Segment(center1, v_dr1);
        s_ul1 = new math.Segment(center1, v_ul1);
        s_dl1 = new math.Segment(center1, v_dl1);
        if (edge.intersect(s_ur1)) {
          points.push(v_ur1);
        }
        if (edge.intersect(s_dr1)) {
          points.push(v_dr1);
        }
        if (edge.intersect(s_ul1)) {
          points.push(v_ul1);
        }
        if (edge.intersect(s_dl1)) {
          points.push(v_dl1);
        }
        if (!same_node) {
          v_ur2 = new math.Vector(center2.x + width2 * c, center2.y - height2 * c);
          v_dr2 = new math.Vector(center2.x + width2 * c, center2.y + height2 * c);
          v_ul2 = new math.Vector(center2.x - width2 * c, center2.y - height2 * c);
          v_dl2 = new math.Vector(center2.x - width2 * c, center2.y + height2 * c);
          s_ur2 = new math.Segment(center2, v_ur2);
          s_dr2 = new math.Segment(center2, v_dr2);
          s_ul2 = new math.Segment(center2, v_ul2);
          s_dl2 = new math.Segment(center2, v_dl2);
          if (edge.intersect(s_ur2)) {
            points.push(v_ur2);
          }
          if (edge.intersect(s_dr2)) {
            points.push(v_dr2);
          }
          if (edge.intersect(s_ul2)) {
            points.push(v_ul2);
          }
          if (edge.intersect(s_dl2)) {
            points.push(v_dl2);
          }
        }
        points = points.sort(function(a, b) {
          return start.distance(a) - start.distance(b);
        });
        if (points.length > 2) {
          points = [points[0], points[points.length - 1]];
        }
        points.unshift(start);
        points.push(end);
        path = [pos1];
        if (points.length > 2) {
          for (i = _i = 2, _ref = points.length - 1; 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
            cp = this.getControlPoints(points[i - 2], points[i - 1], points[i], 0.5);
            path.push.apply(path, cp);
          }
        }
        path.push(pos2);
        ctx.moveTo(pos1.v1.x, pos1.v1.y);
        for (i = _j = 0, _ref1 = path.length - 1; _j <= _ref1; i = _j += 2) {
          cur = path[i];
          next = path[i + 1];
          ctx.bezierCurveTo(cur.v2.x, cur.v2.y, next.v2.x, next.v2.y, next.v1.x, next.v1.y);
        }
        return ctx.stroke();
      };

      return EdgeGizmo;

    })(root.Gizmo);
  });

  define([], function() {
    var math;
    math = namespace('Math');
    math.Vector = (function() {

      function Vector(x, y) {
        this.x = x;
        this.y = y;
      }

      Vector.prototype.distance = function(v) {
        var a, b;
        a = this.x - v.x;
        b = this.y - v.y;
        return Math.sqrt(a * a + b * b);
      };

      return Vector;

    })();
    math.Line = (function() {

      function Line(a, b, c) {
        var m;
        m = (c > 0 ? -1 : 1) / Math.sqrt(a * a + b * b);
        this.A = a * m;
        this.B = b * m;
        this.C = c * m;
      }

      Line.from_vectors = function(v1, v2) {
        return new this(v1.y - v2.y, v2.x - v1.x, v1.x * v2.y - v2.x * v1.y);
      };

      Line.prototype.distance = function(v) {
        return this.A * v.x + this.B * v.y + this.C;
      };

      return Line;

    })();
    math.Segment = (function() {

      function Segment(v1, v2) {
        this.v1 = v1;
        this.v2 = v2;
        this.line = math.Line.from_vectors(this.v1, this.v2);
      }

      Segment.prototype.intersect = function(segment) {
        var p1, p2, q1, q2;
        q1 = this.line.distance(segment.v1);
        q2 = this.line.distance(segment.v2);
        p1 = segment.line.distance(this.v1);
        p2 = segment.line.distance(this.v2);
        return q1 * q2 <= 0 && p1 * p2 <= 0;
      };

      Segment.prototype.draw = function(ctx) {
        ctx.moveTo(this.v1.x, this.v1.y);
        return ctx.lineTo(this.v2.x, this.v2.y);
      };

      Segment.prototype.length = function() {
        return this.v1.distance(this.v2);
      };

      Segment.prototype.bounds = function() {
        return new math.Rect(this.v1, this.v2);
      };

      return Segment;

    })();
    return math.Rect = (function() {

      function Rect(x1, y1, x2, y2) {
        this.min_x = Math.min(x1, x2);
        this.min_y = Math.min(y1, y2);
        this.max_x = Math.max(x1, x2);
        this.max_y = Math.max(y1, y2);
        this.width = this.max_x - this.min_x;
        this.height = this.max_y - this.min_y;
      }

      Rect.prototype.tl = function() {
        return new math.Vector(this.min_x, this.min_y);
      };

      Rect.prototype.tr = function() {
        return new math.Vector(this.max_x, this.min_y);
      };

      Rect.prototype.br = function() {
        return new math.Vector(this.max_x, this.max_y);
      };

      Rect.prototype.bl = function() {
        return new math.Vector(this.min_x, this.max_y);
      };

      Rect.prototype.center = function() {
        return new math.Vector((this.max_x - this.min_x) / 2, (this.max_y - this.min_y) / 2);
      };

      Rect.prototype.contains = function(point) {
        var _ref, _ref1;
        return (this.min_x <= (_ref = point.x) && _ref <= this.max_x) && (this.min_y <= (_ref1 = point.y) && _ref1 <= this.max_y);
      };

      Rect.from_vectors = function(v1, v2) {
        return new this(v1.x, v1.y, v2.x, v2.y);
      };

      Rect.prototype.intersect = function(rect) {
        if (this.min_x > rect.max_x) {
          return false;
        }
        if (this.max_x < rect.min_x) {
          return false;
        }
        if (this.min_y > rect.max_y) {
          return false;
        }
        if (this.max_y < rect.min_y) {
          return false;
        }
        return true;
      };

      return Rect;

    })();
  });

  define(['Backbone.Model', "revigred.controller"], function() {
    var collections, gizmos, models;
    models = namespace("revigred.models");
    collections = namespace("revigred.collections");
    gizmos = namespace("revigred.gizmos");
    models.GraphModel = (function(_super) {

      __extends(GraphModel, _super);

      function GraphModel(options) {
        GraphModel.__super__.constructor.call(this, options);
        this.nodes = new collections.NodesList();
        this.connections = new collections.ConnectionsList();
      }

      GraphModel.prototype.add = function() {
        var node, nodes, _i, _j, _len, _len1;
        nodes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          node = nodes[_i];
          if (!isinstance(node, models.NodeModel, gizmos.Gizmo)) {
            throw "Invalid type";
          }
        }
        for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
          node = nodes[_j];
          if (isinstance(node, models.NodeModel)) {
            this.nodes.push(node);
            node.set_graph(this);
          } else if (isinstance(node, gizmos.Gizmo)) {
            this.gizmos.push(node);
          }
        }
        return this;
      };

      GraphModel.prototype.pick_start = function(start_connector) {
        this.start_connector = start_connector;
      };

      GraphModel.prototype.pick_end = function(end_connector) {
        var connection;
        if (this.start_connector != null) {
          if (this.start_connector !== end_connector) {
            connection = this.make_connection(this.start_connector, end_connector);
            this.connections.push(connection);
          }
          return this.drop_start();
        }
      };

      GraphModel.prototype.drop_start = function() {
        return this.start_connector = null;
      };

      GraphModel.prototype.make_connection = function(connector1, connector2) {
        return new models.ConnectionModel({
          start: connector1,
          end: connector2
        });
      };

      GraphModel.prototype.select = function(node) {
        return node.set("selected", true);
      };

      GraphModel.prototype.deselect = function(node) {
        return node.set("selected", false);
      };

      GraphModel.prototype.deselect_all = function() {
        var _ref, _ref1;
        return (_ref = this.nodes) != null ? (_ref1 = _ref.selection) != null ? _ref1.deselect_all() : void 0 : void 0;
      };

      GraphModel.prototype._on_select_node = function(node) {
        var _ref, _ref1;
        return (_ref = this.nodes) != null ? (_ref1 = _ref.selection) != null ? _ref1.add(node) : void 0 : void 0;
      };

      GraphModel.prototype._on_deselect_node = function(node) {
        var _ref, _ref1;
        return (_ref = this.nodes) != null ? (_ref1 = _ref.selection) != null ? _ref1.remove(node) : void 0 : void 0;
      };

      return GraphModel;

    })(Backbone.Model);
    models.NodeModel = (function(_super) {

      __extends(NodeModel, _super);

      NodeModel.prototype.title = "";

      NodeModel.prototype.defaults = {
        id: null,
        x: 0,
        y: 0,
        selected: false
      };

      NodeModel.prototype.validation = {
        id: function(value, attr, computedState) {
          if (!(value != null)) {
            return 'Name is invalid';
          }
        }
      };

      function NodeModel(options) {
        NodeModel.__super__.constructor.call(this, options);
        if (!(options.id != null)) {
          this.set("id", uuid.v4());
        }
        this.left = new collections.LeftConnectorsList();
        this.right = new collections.RightConnectorsList();
        this.on("change:selected", this._on_selection, this);
      }

      NodeModel.prototype.set_graph = function(graph) {
        this.graph = graph;
      };

      NodeModel.prototype.set_bounds = function(bounds) {
        this.bounds = bounds;
      };

      NodeModel.prototype.add = function() {
        var connector, connectors, _i, _j, _len, _len1;
        connectors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (_i = 0, _len = connectors.length; _i < _len; _i++) {
          connector = connectors[_i];
          if (!isinstance(connector, models.ConnectorModel)) {
            throw "Invalid type";
          }
        }
        for (_j = 0, _len1 = connectors.length; _j < _len1; _j++) {
          connector = connectors[_j];
          if (isinstance(connector, models.LeftConnectorModel)) {
            this.left.push(connector);
          } else if (isinstance(connector, models.RightConnectorModel)) {
            this.right.push(connector);
          }
          connector.set_node(this);
        }
        return this;
      };

      NodeModel.prototype.highlight = function(type) {
        return this.trigger("highlight", type);
      };

      NodeModel.prototype.select = function() {
        return this.set("selected", true);
      };

      NodeModel.prototype.deselect = function() {
        return this.set("selected", false);
      };

      NodeModel.prototype.moveBy = function(dx, dy) {
        this.set("x", this.attributes.x + dx);
        return this.set("y", this.attributes.y + dy);
      };

      NodeModel.prototype._on_selection = function(model, value, options) {
        if (value) {
          this.trigger("selected");
          return this.graph._on_select_node(this);
        } else {
          this.trigger("deselected");
          return this.graph._on_deselect_node(this);
        }
      };

      NodeModel.prototype.destroy = function() {
        delete this.graph;
        delete this.bounds;
        return this.trigger('destroy', this, this.collection);
      };

      return NodeModel;

    })(Backbone.Model);
    models.ConnectorModel = (function(_super) {

      __extends(ConnectorModel, _super);

      function ConnectorModel() {
        return ConnectorModel.__super__.constructor.apply(this, arguments);
      }

      ConnectorModel.prototype.defaults = {
        name: "",
        title: ""
      };

      ConnectorModel.prototype.set_node = function(node) {
        this.node = node;
      };

      ConnectorModel.prototype.set_position = function(position) {
        this.position = position;
      };

      return ConnectorModel;

    })(Backbone.Model);
    models.LeftConnectorModel = (function(_super) {

      __extends(LeftConnectorModel, _super);

      function LeftConnectorModel() {
        return LeftConnectorModel.__super__.constructor.apply(this, arguments);
      }

      return LeftConnectorModel;

    })(models.ConnectorModel);
    models.RightConnectorModel = (function(_super) {

      __extends(RightConnectorModel, _super);

      function RightConnectorModel() {
        return RightConnectorModel.__super__.constructor.apply(this, arguments);
      }

      return RightConnectorModel;

    })(models.ConnectorModel);
    return models.ConnectionModel = (function(_super) {

      __extends(ConnectionModel, _super);

      function ConnectionModel() {
        return ConnectionModel.__super__.constructor.apply(this, arguments);
      }

      ConnectionModel.prototype["default"] = {
        start: null,
        end: null
      };

      return ConnectionModel;

    })(Backbone.Model);
  });

  define("revigred.collections", ['Backbone.Collection', 'revigred.models.NodeModel', 'revigred.models.LeftConnectorModel', 'revigred.models.RightConnectorModel'], function() {
    var collections, models;
    models = namespace("revigred.models");
    collections = namespace("revigred.collections");
    this.NodesList = (function(_super) {

      __extends(NodesList, _super);

      NodesList.prototype.model = models.NodeModel;

      function NodesList(options) {
        NodesList.__super__.constructor.call(this, options);
        this.selection = new collections.Selection();
        this.selection.on("remove", this._on_restore, this);
      }

      NodesList.prototype._on_restore = function(node, collection) {
        return this.trigger("restore", node);
      };

      NodesList.prototype.set_dragging_callback = function(callback) {
        return this.selection.set_dragging_callback(callback);
      };

      NodesList.prototype.drag = function(dx, dy) {
        this.forEach(function(node) {
          node.moveBy(dx, dy);
          return false;
        });
        return this.selection.notify_dragging();
      };

      return NodesList;

    })(Backbone.Collection);
    this.ConnectorsList = (function(_super) {

      __extends(ConnectorsList, _super);

      function ConnectorsList() {
        return ConnectorsList.__super__.constructor.apply(this, arguments);
      }

      return ConnectorsList;

    })(Backbone.Collection);
    this.LeftConnectorsList = (function(_super) {

      __extends(LeftConnectorsList, _super);

      function LeftConnectorsList() {
        return LeftConnectorsList.__super__.constructor.apply(this, arguments);
      }

      LeftConnectorsList.prototype.model = models.LeftConnectorModel;

      return LeftConnectorsList;

    })(this.ConnectorsList);
    this.RightConnectorsList = (function(_super) {

      __extends(RightConnectorsList, _super);

      function RightConnectorsList() {
        return RightConnectorsList.__super__.constructor.apply(this, arguments);
      }

      RightConnectorsList.prototype.model = models.RightConnectorModel;

      return RightConnectorsList;

    })(this.ConnectorsList);
    return this.Selection = (function(_super) {

      __extends(Selection, _super);

      Selection.prototype.model = models.NodeModel;

      function Selection() {
        Selection.__super__.constructor.call(this);
      }

      Selection.prototype.deselect_all = function() {
        return _.forEach(this.toArray(), function(node) {
          return node.deselect();
        });
      };

      Selection.prototype.set_dragging_callback = function(callback) {
        return this.dragging_callback = callback;
      };

      Selection.prototype.notify_dragging = function() {
        if (this.dragging_callback != null) {
          this.dragging_callback();
          return delete this.dragging_callback;
        }
      };

      Selection.prototype.drag = function(dx, dy) {
        this.forEach(function(node) {
          node.moveBy(dx, dy);
          return false;
        });
        return this.notify_dragging();
      };

      return Selection;

    })(Backbone.Collection);
  });

  define("revigred.collections", ['revigred.models.ConnectionModel'], function() {
    var models;
    models = namespace("revigred.models");
    return this.ConnectionsList = (function(_super) {

      __extends(ConnectionsList, _super);

      function ConnectionsList() {
        return ConnectionsList.__super__.constructor.apply(this, arguments);
      }

      models.ConnectionModel;

      return ConnectionsList;

    })(Backbone.Collection);
  });

  math = Math;

  $.widget("ui.selector", $.ui.mouse, {
    options: {
      distance: 0,
      tolerance: 'touch'
    },
    _create: function() {
      this._mouseInit();
      this.tooltip = $("<div class='ui-tooltip ui-widget ui-widget-content'></div>");
      this.helper = $("<div class='ui-selectable-helper'></div>");
      this.helper.append(this.tooltip);
      this.anchorX = false;
      return this.anchorY = false;
    },
    _destroy: function() {
      return this._mouseDestroy();
    },
    _mouseStart: function(event) {
      var _this = this;
      if (this.options.disabled) {
        return false;
      }
      this.offset = this.element.offset();
      this.x = event.pageX - this.offset.left;
      this.y = event.pageY - this.offset.top;
      this.shiftKey = event.shiftKey;
      this.altKey = event.altKey;
      this.ctrlKey = event.ctrlKey;
      this.rect = new math.Rect(this.x, this.y, this.x, this.y);
      if (!this._trigger("start", event, this)) {
        return false;
      }
      $(this.element).append(this.helper);
      this.helper.css({
        left: this.x,
        top: this.y,
        width: 0,
        height: 0
      });
      $(window).on('keydown.' + this.widgetName, function(event) {
        switch (event.keyCode) {
          case 16:
            _this._setShift(true);
            break;
          case 17:
            _this._setCtrl(true);
            break;
          case 18:
            _this._setAlt(true);
            break;
          default:
            return true;
        }
        event.preventDefault();
        return false;
      });
      return $(window).on('keyup.' + this.widgetName, function(event) {
        switch (event.keyCode) {
          case 16:
            _this._setShift(false);
            break;
          case 17:
            _this._setCtrl(false);
            break;
          case 18:
            _this._setAlt(false);
            break;
          default:
            return true;
        }
        event.preventDefault();
        return false;
      });
    },
    say: function(text) {
      return this.tooltip.text(text);
    },
    _setAlt: function(state) {
      if (this.altKey !== state) {
        this.altKey = state;
        return this._trigger("switch", event, this);
      }
    },
    _setShift: function(state) {
      if (this.shiftKey !== state) {
        this.shiftKey = state;
        return this._trigger("switch", event, this);
      }
    },
    _setCtrl: function(state) {
      if (this.ctrlKey !== state) {
        this.ctrlKey = state;
        return this._trigger("switch", event, this);
      }
    },
    _mouseDrag: function(event) {
      var anchorX, anchorY, rect, x, y;
      x = event.pageX - this.offset.left;
      y = event.pageY - this.offset.top;
      anchorX = x > this.x;
      anchorY = y > this.y;
      if (anchorX !== this.anchorX) {
        this.anchorX = anchorX;
        if (anchorX) {
          this.tooltip.css({
            left: "auto",
            right: 0
          });
        } else {
          this.tooltip.css({
            left: 0,
            right: "auto"
          });
        }
      }
      if (anchorY !== this.anchorY) {
        this.anchorY = anchorY;
        if (anchorY) {
          this.tooltip.css({
            top: "auto",
            bottom: 0
          });
        } else {
          this.tooltip.css({
            top: 0,
            bottom: "auto"
          });
        }
      }
      this.rect = rect = new math.Rect(this.x, this.y, x, y);
      this.helper.css({
        left: rect.min_x,
        top: rect.min_y,
        width: rect.width,
        height: rect.height
      });
      this._trigger("update", event, this);
      return false;
    },
    _mouseStop: function(event) {
      $(window).off('keydown.' + this.widgetName);
      $(window).off('keyup.' + this.widgetName);
      this._trigger("stop", event, this);
      this.helper.remove();
      return false;
    }
  });

  define("revigred.settings", [], function() {
    this.is_select = function(event) {
      if (event.which !== 1) {
        return false;
      }
      if (event.shiftKey) {
        return false;
      }
      if (event.ctrlKey) {
        return false;
      }
      if (event.altKey) {
        return false;
      }
      return true;
    };
    this.is_join_select = function(event) {
      if (event.which !== 1) {
        return false;
      }
      if (event.shiftKey) {
        return false;
      }
      if (!event.ctrlKey) {
        return false;
      }
      if (event.altKey) {
        return false;
      }
      return true;
    };
    this.get_selection_rule = function(ctrl, shift, alt) {
      if (ctrl && !shift && !alt) {
        return UnionDiff;
      }
      if (!ctrl && shift && !alt) {
        return IntersectDiff;
      }
      if (!ctrl && !shift && alt) {
        return DifferenceDiff;
      }
      if (!ctrl && !shift && !alt) {
        return ReplaceDiff;
      }
      return null;
    };
    return null;
  });

  define([], function() {
    var root, _isinstance;
    root = this;
    _isinstance = function() {
      var t, type, types, _i, _len;
      t = arguments[0], types = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        if (type === t) {
          return true;
        }
      }
      if (t.__proto__ != null) {
        return _isinstance.apply(null, [t.__proto__].concat(__slice.call(types)));
      }
      return false;
    };
    root.isinstance = function() {
      var type, types, value;
      value = arguments[0], types = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      types = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = types.length; _i < _len; _i++) {
          type = types[_i];
          _results.push(type.prototype);
        }
        return _results;
      })();
      return _isinstance.apply(null, [value].concat(__slice.call(types)));
    };
    root.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
      return window.setTimeout(callback, 20);
    };
    Function.prototype.property = function(prop, desc) {
      return Object.defineProperty(this.prototype, prop, desc);
    };
    root.Diff = (function() {

      function Diff(old, _new) {
        var _ref;
        this.old = old != null ? old : [];
        this["new"] = _new;
        if ((_ref = this["new"]) == null) {
          this["new"] = this.old;
        }
      }

      Diff.property('removed', {
        get: function() {
          var _ref;
          return (_ref = this._removed) != null ? _ref : this._removed = _.difference(this.old, this["new"]);
        }
      });

      Diff.property('unchanged', {
        get: function() {
          var _ref;
          return (_ref = this._unchanged) != null ? _ref : this._unchanged = _.intersect(this.old, this["new"]);
        }
      });

      Diff.property('added', {
        get: function() {
          var _ref;
          return (_ref = this._added) != null ? _ref : this._added = _.difference(this["new"], this.old);
        }
      });

      Diff.prototype.clear = function() {
        delete this._removed;
        delete this._unchanged;
        return delete this._added;
      };

      Diff.prototype.update = function(current) {
        this.old = this["new"];
        this["new"] = current;
        return this.clear();
      };

      return Diff;

    })();
    root.DiffWithBase = (function() {

      function DiffWithBase() {}

      DiffWithBase.prototype.clear = function() {
        delete this._remain;
        delete this._unset;
        delete this._common;
        delete this._added;
        delete this._removed;
        return delete this._result;
      };

      DiffWithBase.prototype.update = function(current) {
        this.current = current != null ? current : [];
        this.diff.update(this.current);
        return this.clear();
      };

      return DiffWithBase;

    })();
    root.UnionDiff = (function(_super) {

      __extends(UnionDiff, _super);

      UnionDiff.prototype.name = "Union";

      function UnionDiff(base) {
        this.base = base;
        this.diff = new root.Diff();
      }

      UnionDiff.property('remain', {
        get: function() {
          var _ref;
          return (_ref = this._remain) != null ? _ref : this._remain = _.intersect(this.diff.removed, this.base);
        }
      });

      UnionDiff.property('unset', {
        get: function() {
          var _ref;
          return (_ref = this._unset) != null ? _ref : this._unset = _.difference(this.diff.removed, this.base);
        }
      });

      UnionDiff.property('common', {
        get: function() {
          var _ref;
          return (_ref = this._common) != null ? _ref : this._common = _.intersect(this.diff.added, this.base);
        }
      });

      UnionDiff.property('added', {
        get: function() {
          var _ref;
          return (_ref = this._added) != null ? _ref : this._added = _.difference(this.diff.added, this.base);
        }
      });

      UnionDiff.property('removed', {
        get: function() {
          var _ref;
          return (_ref = this._removed) != null ? _ref : this._removed = [];
        }
      });

      UnionDiff.property('result', {
        get: function() {
          var _ref;
          return (_ref = this._result) != null ? _ref : this._result = new root.Diff(this.base, _.union(this.base, this.current));
        }
      });

      return UnionDiff;

    })(root.DiffWithBase);
    root.ReplaceDiff = (function(_super) {

      __extends(ReplaceDiff, _super);

      ReplaceDiff.prototype.name = "Replace";

      function ReplaceDiff(base) {
        this.base = base;
        this.diff = new root.Diff(this.base);
      }

      ReplaceDiff.property('remain', {
        get: function() {
          var _ref;
          return (_ref = this._remain) != null ? _ref : this._remain = [];
        }
      });

      ReplaceDiff.property('unset', {
        get: function() {
          var _ref;
          return (_ref = this._unset) != null ? _ref : this._unset = _.difference(this.diff.removed, this.base);
        }
      });

      ReplaceDiff.property('common', {
        get: function() {
          var _ref;
          return (_ref = this._common) != null ? _ref : this._common = _.intersect(this.diff.added, this.base);
        }
      });

      ReplaceDiff.property('added', {
        get: function() {
          var _ref;
          return (_ref = this._added) != null ? _ref : this._added = _.difference(this.diff.added, this.base);
        }
      });

      ReplaceDiff.property('removed', {
        get: function() {
          var _ref;
          return (_ref = this._removed) != null ? _ref : this._removed = _.intersect(this.base, this.diff.removed);
        }
      });

      ReplaceDiff.property('result', {
        get: function() {
          var _ref;
          return (_ref = this._result) != null ? _ref : this._result = new root.Diff(this.base, this.current);
        }
      });

      return ReplaceDiff;

    })(root.DiffWithBase);
    root.IntersectDiff = (function(_super) {

      __extends(IntersectDiff, _super);

      IntersectDiff.prototype.name = "Intersect";

      function IntersectDiff(base) {
        this.base = base;
        this.diff = new root.Diff(this.base);
      }

      IntersectDiff.property('remain', {
        get: function() {
          var _ref;
          return (_ref = this._remain) != null ? _ref : this._remain = [];
        }
      });

      IntersectDiff.property('unset', {
        get: function() {
          var _ref;
          return (_ref = this._unset) != null ? _ref : this._unset = _.difference(this.diff.removed, this.base);
        }
      });

      IntersectDiff.property('common', {
        get: function() {
          var _ref;
          return (_ref = this._common) != null ? _ref : this._common = _.intersect(this.diff.added, this.base);
        }
      });

      IntersectDiff.property('added', {
        get: function() {
          var _ref;
          return (_ref = this._added) != null ? _ref : this._added = [];
        }
      });

      IntersectDiff.property('removed', {
        get: function() {
          var _ref;
          return (_ref = this._removed) != null ? _ref : this._removed = _.intersect(this.base, this.diff.removed);
        }
      });

      IntersectDiff.property('result', {
        get: function() {
          var _ref;
          return (_ref = this._result) != null ? _ref : this._result = new root.Diff(this.base, _.intersect(this.base, this.current));
        }
      });

      return IntersectDiff;

    })(root.DiffWithBase);
    return root.DifferenceDiff = (function(_super) {

      __extends(DifferenceDiff, _super);

      DifferenceDiff.prototype.name = "Difference";

      function DifferenceDiff(base) {
        this.base = base;
        this.diff = new root.Diff();
      }

      DifferenceDiff.property('remain', {
        get: function() {
          var _ref;
          return (_ref = this._remain) != null ? _ref : this._remain = _.intersect(this.base, this.diff.removed);
        }
      });

      DifferenceDiff.property('unset', {
        get: function() {
          var _ref;
          return (_ref = this._unset) != null ? _ref : this._unset = [];
        }
      });

      DifferenceDiff.property('common', {
        get: function() {
          var _ref;
          return (_ref = this._common) != null ? _ref : this._common = [];
        }
      });

      DifferenceDiff.property('added', {
        get: function() {
          var _ref;
          return (_ref = this._added) != null ? _ref : this._added = [];
        }
      });

      DifferenceDiff.property('removed', {
        get: function() {
          var _ref;
          return (_ref = this._removed) != null ? _ref : this._removed = _.intersect(this.base, this.diff.added);
        }
      });

      DifferenceDiff.property('result', {
        get: function() {
          var _ref;
          return (_ref = this._result) != null ? _ref : this._result = new root.Diff(this.base, _.difference(this.base, this.current));
        }
      });

      return DifferenceDiff;

    })(root.DiffWithBase);
  });

  define(["Backbone.View"], function() {
    var Controller, settings, views;
    views = namespace("revigred.views");
    math = namespace("Math");
    settings = namespace("revigred.settings");
    Controller = revigred.controller.instance;
    views.GraphView = (function(_super) {

      __extends(GraphView, _super);

      GraphView.prototype._dragging = false;

      function GraphView(options) {
        GraphView.__super__.constructor.call(this, options);
        this.nodes = new views.NodesView({
          model: this.model.nodes
        });
      }

      GraphView.prototype.render = function(callback) {
        this.callback = callback;
        this.$nodes = this.nodes.render().$el;
        this.$el.append(this.$nodes).disableSelection();
        this.$canvas = this.$("canvas");
        this.canvas = this.$canvas[0];
        this.context = this.canvas.getContext("experimental-webgl");
        $(window).resize(_.bind(this.resize, this));
        this.resize();
        return this.draw();
      };

      GraphView.prototype.resize = function() {
        this.canvas.width = this.$el.innerWidth();
        return this.canvas.height = this.$el.innerHeight();
      };

      GraphView.prototype.draw = function() {
        requestAnimationFrame(_.bind(this.draw, this));
        return typeof this.callback === "function" ? this.callback() : void 0;
      };

      return GraphView;

    })(Backbone.View);
    views.NodesView = (function(_super) {

      __extends(NodesView, _super);

      NodesView.prototype.tagName = 'div';

      NodesView.prototype.className = 'nodes';

      function NodesView(options) {
        NodesView.__super__.constructor.call(this, options);
        this.selection = new views.SelectionView({
          model: this.model.selection
        });
        this.model.on('add', this._add, this);
        this.model.on('reset', this._reset, this);
        this.model.on('restore', this._restore, this);
      }

      NodesView.prototype._reset = function() {
        return this.model.forEach(this._add, this);
      };

      NodesView.prototype._add = function(node) {
        var view;
        view = Controller.get_node_view(node);
        return this.$el.append(view.render().el);
      };

      NodesView.prototype._restore = function(node) {
        var view;
        view = Controller.get_node_view(node);
        return this.$el.append(view.el);
      };

      NodesView.prototype._highlight = function() {
        this._diff.unset.forEach(function(node) {
          return node.highlight(null);
        });
        this._diff.remain.forEach(function(node) {
          return node.highlight("selected");
        });
        this._diff.common.forEach(function(node) {
          return node.highlight("intersect");
        });
        this._diff.added.forEach(function(node) {
          return node.highlight("added");
        });
        return this._diff.removed.forEach(function(node) {
          return node.highlight("removed");
        });
      };

      NodesView.prototype._cancel_highlight = function() {
        this._diff.result.added.forEach(function(node) {
          return node.highlight(null);
        });
        this._diff.result.unchanged.forEach(function(node) {
          return node.highlight("selected");
        });
        return this._diff.result.removed.forEach(function(node) {
          return node.highlight("selected");
        });
      };

      NodesView.prototype.render = function() {
        var _this = this;
        this.$el.append(this.selection.render().el).selector({
          distance: 3,
          start: function(event, widget) {
            var new_rule;
            new_rule = settings.get_selection_rule(widget.ctrlKey, widget.shiftKey, widget.altKey);
            _this._diff = new new_rule(_this.model.selection.models);
            return widget.say(_this._diff.name);
          },
          update: function(event, widget) {
            var _selected;
            _selected = _this.model.filter(function(node) {
              return widget.rect.intersect(node.bounds());
            });
            _this._diff.update(_selected);
            return _this._highlight();
          },
          "switch": function(event, widget) {
            var current, new_rule;
            new_rule = settings.get_selection_rule(widget.ctrlKey, widget.shiftKey, widget.altKey);
            if (new_rule != null) {
              current = _this._diff.current;
              _this._cancel_highlight();
              _this._diff = new new_rule(_this.model.selection.models);
              _this._diff.update();
              _this._highlight();
              _this._diff.update(current);
              _this._highlight();
              return widget.say(_this._diff.name);
            }
          },
          stop: function(event, widget) {
            _this._diff.result.added.forEach(function(node) {
              return node.select();
            });
            _this._diff.result.unchanged.forEach(function(node) {
              return node.highlight("selected");
            });
            _this._diff.result.removed.forEach(function(node) {
              return node.deselect();
            });
            return delete _this._diff;
          }
        }).css({
          position: "absolute"
        });
        this._reset();
        return this;
      };

      return NodesView;

    })(Backbone.View);
    views.SelectionView = (function(_super) {

      __extends(SelectionView, _super);

      SelectionView.prototype.tagName = 'div';

      SelectionView.prototype.className = 'selection';

      SelectionView.prototype.events = {
        "click": "_on_click",
        "mousedown": "_on_mousedown"
      };

      function SelectionView(options) {
        SelectionView.__super__.constructor.call(this, options);
        this.model.on('add', this._add, this);
        this.model.on('remove', this._remove, this);
        this.counter = 0;
        this.dragged = false;
      }

      SelectionView.prototype._add = function(node) {
        var view;
        view = Controller.get_node_view(node);
        this.counter++;
        return this.$el.show().append(view.$el.css("z-index", this.counter));
      };

      SelectionView.prototype._remove = function(node) {
        if (this.model.length === 0) {
          return this.$el.hide();
        }
      };

      SelectionView.prototype.render = function() {
        var _this = this;
        this.$el.draggable({
          handle: ".node",
          scroll: false,
          distance: 3,
          stop: function(event, ui) {
            _this.dragged = true;
            _this.model.drag(_this.el.offsetLeft, _this.el.offsetTop);
            return _this.$el.css({
              left: 0,
              top: 0
            });
          }
        }).css({
          position: "absolute"
        }).hide();
        return this;
      };

      SelectionView.prototype._on_mousedown = function(event) {
        this.dragged = false;
        return true;
      };

      SelectionView.prototype._on_click = function(event) {
        if (this.dragged) {
          this.dragged = false;
          event.stopPropagation();
        } else {
          if (settings.is_select(event)) {
            this.model.deselect_all();
          }
        }
        return false;
      };

      return SelectionView;

    })(Backbone.View);
    views.NodeView = (function(_super) {

      __extends(NodeView, _super);

      NodeView.prototype.tagName = 'div';

      NodeView.prototype.className = 'node ui-widget ui-widget-content ui-corner-all';

      NodeView.prototype.attributes = {
        tabindex: 1
      };

      function NodeView(options) {
        NodeView.__super__.constructor.call(this, options);
        this.left = new views.LeftConnectorsView({
          model: this.model.left
        });
        this.right = new views.RightConnectorsView({
          model: this.model.right
        });
        this.model.set_bounds(_.bind(this.bounds, this));
        this.model.on('selected', this._on_select, this);
        this.model.on('deselected', this._on_deselect, this);
        this.model.on('destroy', this._on_destroy, this);
        this.model.on('highlight', this._apply_highlight, this);
        this.model.on('change:x', this._x_changed, this);
        this.model.on('change:y', this._y_changed, this);
        this.dragged = false;
      }

      NodeView.prototype.events = {
        "click": "_on_click",
        "mousedown": "_on_mousedown",
        "keyup": "_on_keyup"
      };

      NodeView.prototype._on_click = function(event) {
        if (this.dragged) {
          this.dragged = false;
          event.stopPropagation();
        } else {
          if (settings.is_select(event)) {
            this.model.graph.deselect_all();
            this.model.select();
          }
          if (settings.is_join_select(event)) {
            if (this.model.get("selected")) {
              this.model.deselect();
            } else {
              this.model.select();
            }
          }
        }
        return false;
      };

      NodeView.prototype._on_hover = function(event) {
        return this.$el.toggleClass("ui-state-hover");
      };

      NodeView.prototype._on_dragged = function() {
        return this.dragged = true;
      };

      NodeView.prototype._on_mousedown = function(event) {
        this.dragged = false;
        return this.model.graph.nodes.set_dragging_callback(_.bind(this._on_dragged, this));
      };

      NodeView.prototype._on_keyup = function(event) {
        if (event.which === 46) {
          return this.model.destroy();
        }
      };

      NodeView.prototype._x_changed = function(node, value) {
        return this.$el.css({
          left: value
        });
      };

      NodeView.prototype._y_changed = function(node, value) {
        return this.$el.css({
          top: value
        });
      };

      NodeView.prototype._apply_highlight = function(highlight) {
        if (this.highlight !== highlight) {
          if (this.highlight != null) {
            this.$el.removeClass("node-highlight-" + this.highlight);
          }
          this.highlight = highlight;
          if (this.highlight != null) {
            return this.$el.addClass("node-highlight-" + this.highlight);
          }
        }
      };

      NodeView.prototype._on_select = function() {
        this.$el.focus();
        return this._apply_highlight("selected");
      };

      NodeView.prototype._on_deselect = function() {
        this._apply_highlight(null);
        return this.$el.blur();
      };

      NodeView.prototype._on_destroy = function() {
        return this.$el.remove();
      };

      NodeView.prototype.render = function() {
        this.header = this.make("div", {
          "class": "ui-widget-header ui-corner-top"
        }, this.model.title);
        this.$el.css({
          left: this.model.get("x"),
          top: this.model.get("y")
        }).append(this.header).append(this.left.render().el).append(this.right.render().el).disableSelection();
        return this;
      };

      NodeView.prototype.bounds = function() {
        var x0, x1, y0, y1;
        x0 = this.el.offsetLeft;
        y0 = this.el.offsetTop;
        x1 = x0 + this.el.offsetWidth;
        y1 = y0 + this.el.offsetHeight;
        return new math.Rect(x0, y0, x1, y1);
      };

      return NodeView;

    })(Backbone.View);
    views.ConnectorsView = (function(_super) {

      __extends(ConnectorsView, _super);

      ConnectorsView.prototype.tagName = 'ui';

      function ConnectorsView(options) {
        ConnectorsView.__super__.constructor.call(this, options);
        this.model.on('add', this.addOne, this);
        this.model.on('reset', this.addAll, this);
      }

      ConnectorsView.prototype.addAll = function() {
        return this.model.forEach(this.addOne, this);
      };

      ConnectorsView.prototype.render = function() {
        this.addAll();
        return this;
      };

      return ConnectorsView;

    })(Backbone.View);
    views.LeftConnectorsView = (function(_super) {

      __extends(LeftConnectorsView, _super);

      function LeftConnectorsView() {
        return LeftConnectorsView.__super__.constructor.apply(this, arguments);
      }

      LeftConnectorsView.prototype.className = 'left-connectors';

      LeftConnectorsView.prototype.addOne = function(connector) {
        var view;
        view = new views.LeftConnectorView({
          model: connector
        });
        return this.$el.append(view.render().el);
      };

      return LeftConnectorsView;

    })(views.ConnectorsView);
    views.RightConnectorsView = (function(_super) {

      __extends(RightConnectorsView, _super);

      function RightConnectorsView() {
        return RightConnectorsView.__super__.constructor.apply(this, arguments);
      }

      RightConnectorsView.prototype.className = 'right-connectors';

      RightConnectorsView.prototype.render = function() {
        RightConnectorsView.__super__.render.call(this);
        this.$el.attr("dir", "rtl");
        return this;
      };

      RightConnectorsView.prototype.addOne = function(connector) {
        var view;
        view = new views.RightConnectorView({
          model: connector
        });
        return this.$el.append(view.render().el);
      };

      return RightConnectorsView;

    })(views.ConnectorsView);
    views.ConnectorView = (function(_super) {

      __extends(ConnectorView, _super);

      ConnectorView.prototype.tagName = 'li';

      ConnectorView.prototype.className = 'connector ui-state-default';

      function ConnectorView(options) {
        ConnectorView.__super__.constructor.call(this, options);
        this.model.set_position(_.bind(this.pos, this));
      }

      ConnectorView.prototype.render = function() {
        this.$el.text(this.model.get("title"));
        return this;
      };

      return ConnectorView;

    })(Backbone.View);
    views.LeftConnectorView = (function(_super) {

      __extends(LeftConnectorView, _super);

      function LeftConnectorView() {
        return LeftConnectorView.__super__.constructor.apply(this, arguments);
      }

      LeftConnectorView.prototype.className = 'connector ui-state-default ui-corner-left';

      LeftConnectorView.prototype.pos = function() {
        var pos, x0, x1, y0, y1;
        pos = this.$el.offset();
        x0 = pos.left;
        y0 = pos.top + this.$el.outerHeight() / 2;
        x1 = x0 - 50;
        y1 = y0;
        return new math.Segment(new math.Vector(x0, y0), new math.Vector(x1, y1));
      };

      return LeftConnectorView;

    })(views.ConnectorView);
    return views.RightConnectorView = (function(_super) {

      __extends(RightConnectorView, _super);

      function RightConnectorView() {
        return RightConnectorView.__super__.constructor.apply(this, arguments);
      }

      RightConnectorView.prototype.className = 'connector ui-state-default ui-corner-right';

      RightConnectorView.prototype.pos = function() {
        var pos, x0, x1, y0, y1;
        pos = this.$el.offset();
        x0 = pos.left + this.$el.outerWidth();
        y0 = pos.top + this.$el.outerHeight() / 2;
        x1 = x0 + 50;
        y1 = y0;
        return new math.Segment(new math.Vector(x0, y0), new math.Vector(x1, y1));
      };

      return RightConnectorView;

    })(views.ConnectorView);
  });

}).call(this);
