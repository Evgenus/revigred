// Generated by CoffeeScript 1.3.3
(function() {
  var ConnectorView, ConnectorsView, EdgeGizmo, FlowNode, Gizmo, LeftConnectorView, LeftConnectorsView, NodeView, NodesView, RightConnectorView, RightConnectorsView, isinstance, requestAnimationFrame, _isinstance,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  FlowNode = (function(_super) {

    __extends(FlowNode, _super);

    FlowNode.prototype.inputs = {};

    FlowNode.prototype.outputs = {};

    function FlowNode(options) {
      var data, name;
      FlowNode.__super__.constructor.call(this, options);
      for (name in this.inputs) {
        data = {
          name: name
        };
        _.extend(data, this.inputs[name]);
        this.add(new LeftConnectorModel(data));
      }
      for (name in this.outputs) {
        data = {
          name: name
        };
        _.extend(data, this.outputs[name]);
        this.add(new RightConnectorModel(data));
      }
    }

    return FlowNode;

  })(NodeModel);

  root.SumNode = (function(_super) {

    __extends(SumNode, _super);

    function SumNode() {
      return SumNode.__super__.constructor.apply(this, arguments);
    }

    SumNode.prototype.defaults = {
      title: "Sum"
    };

    SumNode.prototype.inputs = {
      a: {
        title: "A"
      },
      b: {
        title: "B"
      }
    };

    SumNode.prototype.outputs = {
      result: {
        title: "A+B"
      }
    };

    return SumNode;

  })(FlowNode);

  root.FlowGraph = (function(_super) {

    __extends(FlowGraph, _super);

    function FlowGraph() {
      return FlowGraph.__super__.constructor.apply(this, arguments);
    }

    return FlowGraph;

  })(GraphModel);

  Gizmo = (function() {

    function Gizmo() {}

    return Gizmo;

  })();

  EdgeGizmo = (function(_super) {

    __extends(EdgeGizmo, _super);

    function EdgeGizmo(connector1, connector2) {
      this.connector1 = connector1;
      this.connector2 = connector2;
    }

    EdgeGizmo.prototype.getControlPoints = function(v0, v1, v2, t) {
      var d01, d12, fa, fb;
      d01 = Math.sqrt((v1.x - v0.x) * (v1.x - v0.x) + (v1.y - v0.y) * (v1.y - v0.y));
      d12 = Math.sqrt((v2.x - v1.x) * (v2.x - v1.x) + (v2.y - v1.y) * (v2.y - v1.y));
      fa = t * d01 / (d01 + d12);
      fb = t * d12 / (d01 + d12);
      return [new Segment(v1, new Vector(v1.x - fa * (v2.x - v0.x), v1.y - fa * (v2.y - v0.y))), new Segment(v1, new Vector(v1.x + fb * (v2.x - v0.x), v1.y + fb * (v2.y - v0.y)))];
    };

    EdgeGizmo.prototype.render = function(ctx) {
      var bounds1, bounds2, c, center1, center2, cp, cur, edge, end, height1, height2, i, next, path, points, pos1, pos2, s_dl1, s_dl2, s_dr1, s_dr2, s_ul1, s_ul2, s_ur1, s_ur2, start, v_dl1, v_dl2, v_dr1, v_dr2, v_ul1, v_ul2, v_ur1, v_ur2, width1, width2, _i, _j, _ref, _ref1;
      pos1 = this.connector1.pos();
      pos2 = this.connector2.pos();
      start = pos1.v1;
      end = pos2.v1;
      edge = new Segment(start, end);
      bounds1 = this.connector1.model.node.bounds();
      width1 = bounds1.v2.x - bounds1.v1.x;
      height1 = bounds1.v2.y - bounds1.v1.y;
      center1 = new Vector((bounds1.v1.x + bounds1.v2.x) / 2, (bounds1.v1.y + bounds1.v2.y) / 2);
      bounds2 = this.connector2.model.node.bounds();
      width2 = bounds2.v2.x - bounds2.v1.x;
      height2 = bounds2.v2.y - bounds2.v1.y;
      center2 = new Vector((bounds2.v1.x + bounds2.v2.x) / 2, (bounds2.v1.y + bounds2.v2.y) / 2);
      c = 1;
      v_ur1 = new Vector(center1.x + width1 * c, center1.y - height1 * c);
      v_dr1 = new Vector(center1.x + width1 * c, center1.y + height1 * c);
      v_ul1 = new Vector(center1.x - width1 * c, center1.y - height1 * c);
      v_dl1 = new Vector(center1.x - width1 * c, center1.y + height1 * c);
      s_ur1 = new Segment(center1, v_ur1);
      s_dr1 = new Segment(center1, v_dr1);
      s_ul1 = new Segment(center1, v_ul1);
      s_dl1 = new Segment(center1, v_dl1);
      v_ur2 = new Vector(center2.x + width2 * c, center2.y - height2 * c);
      v_dr2 = new Vector(center2.x + width2 * c, center2.y + height2 * c);
      v_ul2 = new Vector(center2.x - width2 * c, center2.y - height2 * c);
      v_dl2 = new Vector(center2.x - width2 * c, center2.y + height2 * c);
      s_ur2 = new Segment(center2, v_ur2);
      s_dr2 = new Segment(center2, v_dr2);
      s_ul2 = new Segment(center2, v_ul2);
      s_dl2 = new Segment(center2, v_dl2);
      ctx.strokeStyle = "rgb(0,0,0)";
      ctx.lineWidth = 2;
      ctx.beginPath();
      points = [];
      if (edge.intersect(s_ur1)) {
        points.push(v_ur1);
      }
      if (edge.intersect(s_dr1)) {
        points.push(v_dr1);
      }
      if (edge.intersect(s_ul1)) {
        points.push(v_ul1);
      }
      if (edge.intersect(s_dl1)) {
        points.push(v_dl1);
      }
      if (edge.intersect(s_ur2)) {
        points.push(v_ur2);
      }
      if (edge.intersect(s_dr2)) {
        points.push(v_dr2);
      }
      if (edge.intersect(s_ul2)) {
        points.push(v_ul2);
      }
      if (edge.intersect(s_dl2)) {
        points.push(v_dl2);
      }
      points = points.sort(function(a, b) {
        return start.distance(a) - start.distance(b);
      });
      points.unshift(start);
      points.push(end);
      path = [pos1];
      if (points.length > 2) {
        for (i = _i = 2, _ref = points.length - 1; 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
          cp = this.getControlPoints(points[i - 2], points[i - 1], points[i], 0.5);
          path.push.apply(path, cp);
        }
      }
      path.push(pos2);
      ctx.moveTo(pos1.v1.x, pos1.v1.y);
      for (i = _j = 0, _ref1 = path.length - 1; _j <= _ref1; i = _j += 2) {
        cur = path[i];
        next = path[i + 1];
        ctx.bezierCurveTo(cur.v2.x, cur.v2.y, next.v2.x, next.v2.y, next.v1.x, next.v1.y);
      }
      return ctx.stroke();
    };

    return EdgeGizmo;

  })(Gizmo);

  revigred.Vector = (function() {

    function Vector(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector.prototype.distance = function(v) {
      var a, b;
      a = this.x - v.x;
      b = this.y - v.y;
      return Math.sqrt(a * a + b * b);
    };

    return Vector;

  })();

  revigred.Line = (function() {

    function Line(a, b, c) {
      var m;
      m = (c > 0 ? -1 : 1) / Math.sqrt(a * a + b * b);
      this.A = a * m;
      this.B = b * m;
      this.C = c * m;
    }

    Line.from_vectors = function(v1, v2) {
      return new Line(v1.y - v2.y, v2.x - v1.x, v1.x * v2.y - v2.x * v1.y);
    };

    Line.prototype.distance = function(v) {
      return this.A * v.x + this.B * v.y + this.C;
    };

    return Line;

  })();

  revigred.Segment = (function() {

    function Segment(v1, v2) {
      this.v1 = v1;
      this.v2 = v2;
      this.line = Line.from_vectors(this.v1, this.v2);
    }

    Segment.prototype.intersect = function(segment) {
      var p1, p2, q1, q2;
      q1 = this.line.distance(segment.v1);
      q2 = this.line.distance(segment.v2);
      p1 = segment.line.distance(this.v1);
      p2 = segment.line.distance(this.v2);
      return q1 * q2 <= 0 && p1 * p2 <= 0;
    };

    Segment.prototype.draw = function(ctx) {
      ctx.moveTo(this.v1.x, this.v1.y);
      return ctx.lineTo(this.v2.x, this.v2.y);
    };

    Segment.prototype.length = function() {
      return this.v1.distance(this.v2);
    };

    return Segment;

  })();

  define(['use!Underscore', 'use!Backbone'], function(_, Backbone) {
    revirged.GraphModel = (function(_super) {

      __extends(GraphModel, _super);

      function GraphModel(options) {
        GraphModel.__super__.constructor.call(this, options);
        this.nodes = new NodesList();
        this.gizmos = [];
        this.cursor_object = null;
      }

      GraphModel.prototype.add = function() {
        var node, nodes, _i, _j, _len, _len1;
        nodes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          node = nodes[_i];
          if (!isinstance(node, NodeModel, Gizmo)) {
            throw new Error("Invalid type");
          }
        }
        for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
          node = nodes[_j];
          if (isinstance(node, NodeModel)) {
            this.nodes.push(node);
            node.set_graph(this);
          } else if (isinstance(node, Gizmo)) {
            this.gizmos.push(node);
          }
        }
        return this;
      };

      GraphModel.prototype.pick_start = function(view) {
        return this.cursor_object = view;
      };

      GraphModel.prototype.pick_end = function(view) {
        if (isinstance(this.cursor_object, ConnectorView)) {
          if (this.cursor_object === view) {
            return this.drop_start(view);
          } else {
            this.gizmos.push(new EdgeGizmo(view, this.cursor_object));
            return this.cursor_object = null;
          }
        }
      };

      GraphModel.prototype.drop_start = function(view) {
        return this.cursor_object = null;
      };

      return GraphModel;

    })(Backbone.Model);
    revirged.NodeModel = (function(_super) {

      __extends(NodeModel, _super);

      NodeModel.prototype.defaults = {
        title: ""
      };

      function NodeModel(options) {
        NodeModel.__super__.constructor.call(this, options);
        this.left = new LeftConnectorsList();
        this.right = new RightConnectorsList();
      }

      NodeModel.prototype.set_graph = function(graph) {
        this.graph = graph;
      };

      NodeModel.prototype.set_bounds = function(bounds) {
        this.bounds = bounds;
      };

      NodeModel.prototype.add = function() {
        var connector, connectors, _i, _j, _len, _len1;
        connectors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (_i = 0, _len = connectors.length; _i < _len; _i++) {
          connector = connectors[_i];
          if (!isinstance(connector, ConnectorModel)) {
            throw new Error("Invalid type");
          }
        }
        for (_j = 0, _len1 = connectors.length; _j < _len1; _j++) {
          connector = connectors[_j];
          if (isinstance(connector, LeftConnectorModel)) {
            this.left.push(connector);
          } else if (isinstance(connector, RightConnectorModel)) {
            this.right.push(connector);
          }
          connector.set_node(this);
        }
        return this;
      };

      return NodeModel;

    })(Backbone.Model);
    revirged.NodesList = (function(_super) {

      __extends(NodesList, _super);

      function NodesList() {
        return NodesList.__super__.constructor.apply(this, arguments);
      }

      return NodesList;

    })(Backbone.Collection);
    revirged.ConnectorModel = (function(_super) {

      __extends(ConnectorModel, _super);

      function ConnectorModel() {
        return ConnectorModel.__super__.constructor.apply(this, arguments);
      }

      ConnectorModel.prototype.defaults = {
        name: "",
        title: ""
      };

      ConnectorModel.prototype.set_node = function(node) {
        this.node = node;
      };

      return ConnectorModel;

    })(Backbone.Model);
    revirged.LeftConnectorModel = (function(_super) {

      __extends(LeftConnectorModel, _super);

      function LeftConnectorModel() {
        return LeftConnectorModel.__super__.constructor.apply(this, arguments);
      }

      return LeftConnectorModel;

    })(revirged.ConnectorModel);
    revirged.RightConnectorModel = (function(_super) {

      __extends(RightConnectorModel, _super);

      function RightConnectorModel() {
        return RightConnectorModel.__super__.constructor.apply(this, arguments);
      }

      return RightConnectorModel;

    })(revirged.ConnectorModel);
    revirged.ConnectorsList = (function(_super) {

      __extends(ConnectorsList, _super);

      function ConnectorsList() {
        return ConnectorsList.__super__.constructor.apply(this, arguments);
      }

      return ConnectorsList;

    })(Backbone.Collection);
    revirged.LeftConnectorsList = (function(_super) {

      __extends(LeftConnectorsList, _super);

      function LeftConnectorsList() {
        return LeftConnectorsList.__super__.constructor.apply(this, arguments);
      }

      LeftConnectorsList.prototype.model = revirged.LeftConnectorModel;

      return LeftConnectorsList;

    })(revirged.ConnectorsList);
    return revirged.RightConnectorsList = (function(_super) {

      __extends(RightConnectorsList, _super);

      function RightConnectorsList() {
        return RightConnectorsList.__super__.constructor.apply(this, arguments);
      }

      RightConnectorsList.prototype.model = revirged.RightConnectorModel;

      return RightConnectorsList;

    })(revirged.ConnectorsList);
  });

  _isinstance = function() {
    var t, type, types, _i, _len;
    t = arguments[0], types = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = types.length; _i < _len; _i++) {
      type = types[_i];
      if (type === t) {
        return true;
      }
    }
    if (t.__proto__ != null) {
      return _isinstance.apply(null, [t.__proto__].concat(__slice.call(types)));
    }
    return false;
  };

  isinstance = function() {
    var type, types, value;
    value = arguments[0], types = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    types = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        _results.push(type.prototype);
      }
      return _results;
    })();
    return _isinstance.apply(null, [value].concat(__slice.call(types)));
  };

  requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 20);
  };

  root.GraphView = (function(_super) {

    __extends(GraphView, _super);

    function GraphView() {
      return GraphView.__super__.constructor.apply(this, arguments);
    }

    GraphView.prototype.render = function(callback) {
      var nodes, self;
      this.callback = callback;
      nodes = new NodesView({
        model: this.model.nodes,
        el: this.el
      });
      nodes.render();
      self = this;
      this.$el.mouseup(function(ev) {
        return self.model.drop_start();
      });
      this.canvas = this.$("canvas")[0];
      this.context = this.canvas.getContext("2d");
      this.draw();
      $(window).resize(_.bind(this.resize, this));
      return this.resize();
    };

    GraphView.prototype.resize = function() {
      this.canvas.width = this.$el.innerWidth();
      return this.canvas.height = this.$el.innerHeight();
    };

    GraphView.prototype.draw = function() {
      var gizmo, _i, _len, _ref, _results;
      requestAnimationFrame(_.bind(this.draw, this));
      if (typeof this.callback === "function") {
        this.callback();
      }
      this.context.clearRect(0, 0, this.$el.innerWidth(), this.$el.innerHeight());
      _ref = this.model.gizmos;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gizmo = _ref[_i];
        _results.push(gizmo.render(this.context));
      }
      return _results;
    };

    return GraphView;

  })(Backbone.View);

  NodesView = (function(_super) {

    __extends(NodesView, _super);

    function NodesView(options) {
      NodesView.__super__.constructor.call(this, options);
      this.model.on('add', this.addOne, this);
      this.model.on('reset', this.addAll, this);
    }

    NodesView.prototype.addAll = function() {
      return this.model.forEach(this.addOne, this);
    };

    NodesView.prototype.addOne = function(connector) {
      var view;
      view = new NodeView({
        model: connector
      });
      return this.$el.append(view.render().el);
    };

    NodesView.prototype.render = function() {
      this.addAll();
      return this;
    };

    return NodesView;

  })(Backbone.View);

  NodeView = (function(_super) {

    __extends(NodeView, _super);

    NodeView.prototype.tagName = 'div';

    NodeView.prototype.className = 'node ui-widget ui-widget-content ui-corner-all';

    function NodeView(options) {
      NodeView.__super__.constructor.call(this, options);
      this.model.set_bounds(_.bind(this.bounds, this));
    }

    NodeView.prototype.render = function() {
      var left, right, self;
      left = new LeftConnectorsView({
        model: this.model.left
      });
      right = new RightConnectorsView({
        model: this.model.right
      });
      self = this;
      this.$el.draggable({
        handle: ".ui-widget-header",
        scroll: false,
        stack: ".node"
      }).css("left", this.model.get("x")).css("top", this.model.get("y")).css("position", "absolute").append(this.make("div", {
        "class": "ui-widget-header ui-corner-top"
      }, this.model.get("title"))).append(left.render().el).append(right.render().el);
      return this;
    };

    NodeView.prototype.bounds = function() {
      var x0, x1, y0, y1;
      x0 = this.el.offsetLeft;
      y0 = this.el.offsetTop;
      x1 = x0 + this.el.offsetWidth;
      y1 = y0 + this.el.offsetHeight;
      return new Segment(new Vector(x0, y0), new Vector(x1, y1));
    };

    return NodeView;

  })(Backbone.View);

  ConnectorsView = (function(_super) {

    __extends(ConnectorsView, _super);

    ConnectorsView.prototype.tagName = 'ui';

    function ConnectorsView(options) {
      ConnectorsView.__super__.constructor.call(this, options);
      this.model.on('add', this.addOne, this);
      this.model.on('reset', this.addAll, this);
    }

    ConnectorsView.prototype.addAll = function() {
      return this.model.forEach(this.addOne, this);
    };

    ConnectorsView.prototype.render = function() {
      this.addAll();
      return this;
    };

    return ConnectorsView;

  })(Backbone.View);

  LeftConnectorsView = (function(_super) {

    __extends(LeftConnectorsView, _super);

    function LeftConnectorsView() {
      return LeftConnectorsView.__super__.constructor.apply(this, arguments);
    }

    LeftConnectorsView.prototype.className = 'left-connectors';

    LeftConnectorsView.prototype.addOne = function(connector) {
      var view;
      view = new LeftConnectorView({
        model: connector
      });
      return this.$el.append(view.render().el);
    };

    return LeftConnectorsView;

  })(ConnectorsView);

  RightConnectorsView = (function(_super) {

    __extends(RightConnectorsView, _super);

    function RightConnectorsView() {
      return RightConnectorsView.__super__.constructor.apply(this, arguments);
    }

    RightConnectorsView.prototype.className = 'right-connectors';

    RightConnectorsView.prototype.render = function() {
      RightConnectorsView.__super__.render.call(this);
      this.$el.attr("dir", "rtl");
      return this;
    };

    RightConnectorsView.prototype.addOne = function(connector) {
      var view;
      view = new RightConnectorView({
        model: connector
      });
      return this.$el.append(view.render().el);
    };

    return RightConnectorsView;

  })(ConnectorsView);

  ConnectorView = (function(_super) {

    __extends(ConnectorView, _super);

    ConnectorView.prototype.tagName = 'li';

    ConnectorView.prototype.className = 'connector ui-state-default';

    function ConnectorView(options) {
      ConnectorView.__super__.constructor.call(this, options);
    }

    ConnectorView.prototype.render = function() {
      var self;
      self = this;
      this.$el.text(this.model.get("title")).mousedown(function(ev) {
        var _ref;
        if ((_ref = self.model.node.graph) != null) {
          _ref.pick_start(self);
        }
        ev.stopPropagation();
        return false;
      }).mouseup(function(ev) {
        var _ref;
        if ((_ref = self.model.node.graph) != null) {
          _ref.pick_end(self);
        }
        ev.stopPropagation();
        return false;
      }).hover(function() {
        return $(this).toggleClass("ui-state-highlight");
      });
      return this;
    };

    return ConnectorView;

  })(Backbone.View);

  LeftConnectorView = (function(_super) {

    __extends(LeftConnectorView, _super);

    function LeftConnectorView() {
      return LeftConnectorView.__super__.constructor.apply(this, arguments);
    }

    LeftConnectorView.prototype.className = 'connector ui-state-default ui-corner-left';

    LeftConnectorView.prototype.pos = function() {
      var pos, x0, x1, y0, y1;
      pos = this.$el.offset();
      x0 = pos.left;
      y0 = pos.top + this.$el.outerHeight() / 2;
      x1 = x0 - 50;
      y1 = y0;
      return new Segment(new Vector(x0, y0), new Vector(x1, y1));
    };

    return LeftConnectorView;

  })(ConnectorView);

  RightConnectorView = (function(_super) {

    __extends(RightConnectorView, _super);

    function RightConnectorView() {
      return RightConnectorView.__super__.constructor.apply(this, arguments);
    }

    RightConnectorView.prototype.className = 'connector ui-state-default ui-corner-right';

    RightConnectorView.prototype.pos = function() {
      var pos, x0, x1, y0, y1;
      pos = this.$el.offset();
      x0 = pos.left + this.$el.outerWidth();
      y0 = pos.top + this.$el.outerHeight() / 2;
      x1 = x0 + 50;
      y1 = y0;
      return new Segment(new Vector(x0, y0), new Vector(x1, y1));
    };

    return RightConnectorView;

  })(ConnectorView);

}).call(this);
