// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(["revigred.models.NodeModel", "revigred.models.GraphModel"], function() {
    var flow, models;
    models = namespace('revigred.models');
    flow = namespace('revigred.flow');
    flow.FlowNode = (function(_super) {

      __extends(FlowNode, _super);

      FlowNode.prototype.inputs = {};

      FlowNode.prototype.outputs = {};

      function FlowNode(options) {
        var data, name;
        FlowNode.__super__.constructor.call(this, options);
        for (name in this.inputs) {
          data = {
            name: name
          };
          _.extend(data, this.inputs[name]);
          this.add(new models.LeftConnectorModel(data));
        }
        for (name in this.outputs) {
          data = {
            name: name
          };
          _.extend(data, this.outputs[name]);
          this.add(new models.RightConnectorModel(data));
        }
      }

      return FlowNode;

    })(models.NodeModel);
    flow.SumNode = (function(_super) {

      __extends(SumNode, _super);

      function SumNode() {
        return SumNode.__super__.constructor.apply(this, arguments);
      }

      SumNode.prototype.title = "Sum";

      SumNode.prototype.inputs = {
        a: {
          title: "A"
        },
        b: {
          title: "B"
        }
      };

      SumNode.prototype.outputs = {
        result: {
          title: "A+B"
        }
      };

      return SumNode;

    })(flow.FlowNode);
    return flow.FlowGraph = (function(_super) {

      __extends(FlowGraph, _super);

      function FlowGraph() {
        return FlowGraph.__super__.constructor.apply(this, arguments);
      }

      return FlowGraph;

    })(models.GraphModel);
  });

  define([], function() {
    var math, root;
    root = namespace('revigred.gizmos');
    math = namespace('revigred.math');
    root.Gizmo = (function() {

      function Gizmo() {}

      return Gizmo;

    })();
    return root.EdgeGizmo = (function(_super) {

      __extends(EdgeGizmo, _super);

      function EdgeGizmo(connector1, connector2) {
        this.connector1 = connector1;
        this.connector2 = connector2;
      }

      EdgeGizmo.prototype.getControlPoints = function(v0, v1, v2, t) {
        var cp1, cp2, d01, d12, fa, fb;
        d01 = Math.sqrt((v1.x - v0.x) * (v1.x - v0.x) + (v1.y - v0.y) * (v1.y - v0.y));
        d12 = Math.sqrt((v2.x - v1.x) * (v2.x - v1.x) + (v2.y - v1.y) * (v2.y - v1.y));
        fa = t * d01 / (d01 + d12);
        fb = t * d12 / (d01 + d12);
        cp1 = new math.Vector(v1.x - fa * (v2.x - v0.x), v1.y - fa * (v2.y - v0.y));
        cp2 = new math.Vector(v1.x + fb * (v2.x - v0.x), v1.y + fb * (v2.y - v0.y));
        return [new math.Segment(v1, cp1), new math.Segment(v1, cp2)];
      };

      EdgeGizmo.prototype.render = function(ctx) {
        var bounds1, bounds2, c, center1, center2, cp, cur, d, edge, end, height1, height2, i, next, path, points, pos1, pos2, s_dl1, s_dl2, s_dr1, s_dr2, s_ul1, s_ul2, s_ur1, s_ur2, same_node, start, v_dl1, v_dl2, v_dr1, v_dr2, v_ul1, v_ul2, v_ur1, v_ur2, width1, width2, _i, _j, _ref, _ref1;
        pos1 = this.connector1.pos();
        pos2 = this.connector2.pos();
        start = pos1.v1;
        end = pos2.v1;
        edge = new math.Segment(start, end);
        bounds1 = this.connector1.model.node.bounds();
        width1 = bounds1.v2.x - bounds1.v1.x;
        height1 = bounds1.v2.y - bounds1.v1.y;
        center1 = new math.Vector((bounds1.v1.x + bounds1.v2.x) / 2, (bounds1.v1.y + bounds1.v2.y) / 2);
        bounds2 = this.connector2.model.node.bounds();
        width2 = bounds2.v2.x - bounds2.v1.x;
        height2 = bounds2.v2.y - bounds2.v1.y;
        center2 = new math.Vector((bounds2.v1.x + bounds2.v2.x) / 2, (bounds2.v1.y + bounds2.v2.y) / 2);
        same_node = this.connector1.model.node === this.connector2.model.node;
        if (same_node) {
          c = 0.7;
        } else {
          d = Math.sqrt(width1 * width1 + height1 * height1) + Math.sqrt(width2 * width2 + height2 * height2);
          c = Math.min(1 + d, edge.length()) / d;
        }
        ctx.strokeStyle = "rgb(0,0,0)";
        ctx.lineWidth = 2;
        ctx.beginPath();
        points = [];
        v_ur1 = new math.Vector(center1.x + width1 * c, center1.y - height1 * c);
        v_dr1 = new math.Vector(center1.x + width1 * c, center1.y + height1 * c);
        v_ul1 = new math.Vector(center1.x - width1 * c, center1.y - height1 * c);
        v_dl1 = new math.Vector(center1.x - width1 * c, center1.y + height1 * c);
        s_ur1 = new math.Segment(center1, v_ur1);
        s_dr1 = new math.Segment(center1, v_dr1);
        s_ul1 = new math.Segment(center1, v_ul1);
        s_dl1 = new math.Segment(center1, v_dl1);
        if (edge.intersect(s_ur1)) {
          points.push(v_ur1);
        }
        if (edge.intersect(s_dr1)) {
          points.push(v_dr1);
        }
        if (edge.intersect(s_ul1)) {
          points.push(v_ul1);
        }
        if (edge.intersect(s_dl1)) {
          points.push(v_dl1);
        }
        if (!same_node) {
          v_ur2 = new math.Vector(center2.x + width2 * c, center2.y - height2 * c);
          v_dr2 = new math.Vector(center2.x + width2 * c, center2.y + height2 * c);
          v_ul2 = new math.Vector(center2.x - width2 * c, center2.y - height2 * c);
          v_dl2 = new math.Vector(center2.x - width2 * c, center2.y + height2 * c);
          s_ur2 = new math.Segment(center2, v_ur2);
          s_dr2 = new math.Segment(center2, v_dr2);
          s_ul2 = new math.Segment(center2, v_ul2);
          s_dl2 = new math.Segment(center2, v_dl2);
          if (edge.intersect(s_ur2)) {
            points.push(v_ur2);
          }
          if (edge.intersect(s_dr2)) {
            points.push(v_dr2);
          }
          if (edge.intersect(s_ul2)) {
            points.push(v_ul2);
          }
          if (edge.intersect(s_dl2)) {
            points.push(v_dl2);
          }
        }
        points = points.sort(function(a, b) {
          return start.distance(a) - start.distance(b);
        });
        if (points.length > 2) {
          points = [points[0], points[points.length - 1]];
        }
        points.unshift(start);
        points.push(end);
        path = [pos1];
        if (points.length > 2) {
          for (i = _i = 2, _ref = points.length - 1; 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
            cp = this.getControlPoints(points[i - 2], points[i - 1], points[i], 0.5);
            path.push.apply(path, cp);
          }
        }
        path.push(pos2);
        ctx.moveTo(pos1.v1.x, pos1.v1.y);
        for (i = _j = 0, _ref1 = path.length - 1; _j <= _ref1; i = _j += 2) {
          cur = path[i];
          next = path[i + 1];
          ctx.bezierCurveTo(cur.v2.x, cur.v2.y, next.v2.x, next.v2.y, next.v1.x, next.v1.y);
        }
        return ctx.stroke();
      };

      return EdgeGizmo;

    })(root.Gizmo);
  });

  define([], function() {
    var math;
    math = namespace('revigred.math');
    math.Vector = (function() {

      function Vector(x, y) {
        this.x = x;
        this.y = y;
      }

      Vector.prototype.distance = function(v) {
        var a, b;
        a = this.x - v.x;
        b = this.y - v.y;
        return Math.sqrt(a * a + b * b);
      };

      return Vector;

    })();
    math.Line = (function() {

      function Line(a, b, c) {
        var m;
        m = (c > 0 ? -1 : 1) / Math.sqrt(a * a + b * b);
        this.A = a * m;
        this.B = b * m;
        this.C = c * m;
      }

      Line.from_vectors = function(v1, v2) {
        return new this(v1.y - v2.y, v2.x - v1.x, v1.x * v2.y - v2.x * v1.y);
      };

      Line.prototype.distance = function(v) {
        return this.A * v.x + this.B * v.y + this.C;
      };

      return Line;

    })();
    math.Segment = (function() {

      function Segment(v1, v2) {
        this.v1 = v1;
        this.v2 = v2;
        this.line = math.Line.from_vectors(this.v1, this.v2);
      }

      Segment.prototype.intersect = function(segment) {
        var p1, p2, q1, q2;
        q1 = this.line.distance(segment.v1);
        q2 = this.line.distance(segment.v2);
        p1 = segment.line.distance(this.v1);
        p2 = segment.line.distance(this.v2);
        return q1 * q2 <= 0 && p1 * p2 <= 0;
      };

      Segment.prototype.draw = function(ctx) {
        ctx.moveTo(this.v1.x, this.v1.y);
        return ctx.lineTo(this.v2.x, this.v2.y);
      };

      Segment.prototype.length = function() {
        return this.v1.distance(this.v2);
      };

      Segment.prototype.bounds = function() {
        return new math.Rect(this.v1, this.v2);
      };

      return Segment;

    })();
    return math.Rect = (function() {

      function Rect(x1, y1, x2, y2) {
        this.min_x = Math.min(x1, x2);
        this.min_y = Math.min(y1, y2);
        this.max_x = Math.max(x1, x2);
        this.max_y = Math.max(y1, y2);
        this.width = this.max_x - this.min_x;
        this.height = this.max_y - this.min_y;
      }

      Rect.prototype.tl = function() {
        return new math.Vector(this.min_x, this.min_y);
      };

      Rect.prototype.tr = function() {
        return new math.Vector(this.max_x, this.min_y);
      };

      Rect.prototype.br = function() {
        return new math.Vector(this.max_x, this.max_y);
      };

      Rect.prototype.bl = function() {
        return new math.Vector(this.min_x, this.max_y);
      };

      Rect.prototype.center = function() {
        return new math.Vector((this.max_x - this.min_x) / 2, (this.max_y - this.min_y) / 2);
      };

      Rect.prototype.contains = function(point) {
        var _ref, _ref1;
        return (this.min_x <= (_ref = point.x) && _ref <= this.max_x) && (this.min_y <= (_ref1 = point.y) && _ref1 <= this.max_y);
      };

      Rect.from_vectors = function(v1, v2) {
        return new this(v1.x, v1.y, v2.x, v2.y);
      };

      Rect.prototype.intersect = function(rect) {
        if (this.min_x > rect.max_x) {
          return false;
        }
        if (this.max_x < rect.min_x) {
          return false;
        }
        if (this.min_y > rect.max_y) {
          return false;
        }
        if (this.max_y < rect.min_y) {
          return false;
        }
        return true;
      };

      return Rect;

    })();
  });

  define(['Backbone.Model', 'Backbone.Collection'], function() {
    var collections, gizmos, models, views;
    models = namespace("revigred.models");
    collections = namespace("revigred.collections");
    gizmos = namespace("revigred.gizmos");
    views = namespace("revigred.views");
    models.GraphModel = (function(_super) {

      __extends(GraphModel, _super);

      function GraphModel(options) {
        GraphModel.__super__.constructor.call(this, options);
        this.nodes = new collections.NodesList();
        this.edges = [];
        this.cursor_object = null;
        this.selection = [];
      }

      GraphModel.prototype.add = function() {
        var node, nodes, _i, _j, _len, _len1;
        nodes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          node = nodes[_i];
          if (!isinstance(node, models.NodeModel, gizmos.Gizmo)) {
            throw "Invalid type";
          }
        }
        for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
          node = nodes[_j];
          if (isinstance(node, models.NodeModel)) {
            this.nodes.push(node);
            node.set_graph(this);
          } else if (isinstance(node, gizmos.Gizmo)) {
            this.gizmos.push(node);
          }
        }
        return this;
      };

      GraphModel.prototype.pick_start = function(view) {
        return this.cursor_object = view;
      };

      GraphModel.prototype.pick_end = function(view) {
        var gizmo;
        if (this.cursor_object != null) {
          if (isinstance(this.cursor_object, models.ConnectorModel)) {
            if (this.cursor_object === view) {
              return this.drop_start(view);
            } else {
              gizmo = new gizmos.EdgeGizmo(view, this.cursor_object);
              this.edges.push();
              return this.cursor_object = null;
            }
          }
        }
      };

      GraphModel.prototype.drop_start = function(view) {
        return this.cursor_object = null;
      };

      GraphModel.prototype.get_selected = function() {
        return _.clone(this.selection);
      };

      GraphModel.prototype._add_selected = function(node) {
        var index;
        index = this.selection.indexOf(node);
        if (index < 0) {
          return this.selection.push(node);
        }
      };

      GraphModel.prototype._remove_selected = function(node) {
        var index;
        index = this.selection.indexOf(node);
        if (index >= 0) {
          return this.selection.splice(index, 1);
        }
      };

      return GraphModel;

    })(Backbone.Model);
    models.NodeModel = (function(_super) {

      __extends(NodeModel, _super);

      NodeModel.prototype.defaults = {
        id: null,
        x: 0,
        y: 0,
        selected: false
      };

      NodeModel.prototype.validation = {
        id: function(value, attr, computedState) {
          if (!(value != null)) {
            return 'Name is invalid';
          }
        }
      };

      NodeModel.prototype.title = "";

      function NodeModel(options) {
        NodeModel.__super__.constructor.call(this, options);
        if (!(options.id != null)) {
          this.set("id", uuid.v4());
        }
        this.left = new collections.LeftConnectorsList();
        this.right = new collections.RightConnectorsList();
        this.on("change:selected", this._apply_selection);
      }

      NodeModel.prototype.set_graph = function(graph) {
        this.graph = graph;
      };

      NodeModel.prototype.set_bounds = function(bounds) {
        this.bounds = bounds;
      };

      NodeModel.prototype.set_positioner = function(positioner) {
        this.positioner = positioner;
      };

      NodeModel.prototype.add = function() {
        var connector, connectors, _i, _j, _len, _len1;
        connectors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (_i = 0, _len = connectors.length; _i < _len; _i++) {
          connector = connectors[_i];
          if (!isinstance(connector, models.ConnectorModel)) {
            throw "Invalid type";
          }
        }
        for (_j = 0, _len1 = connectors.length; _j < _len1; _j++) {
          connector = connectors[_j];
          if (isinstance(connector, models.LeftConnectorModel)) {
            this.left.push(connector);
          } else if (isinstance(connector, models.RightConnectorModel)) {
            this.right.push(connector);
          }
          connector.set_node(this);
        }
        return this;
      };

      NodeModel.prototype._apply_selection = function(obj, value, changes) {
        if (value) {
          obj.graph._add_selected(obj);
          return obj.trigger("selected");
        } else {
          obj.graph._remove_selected(obj);
          return obj.trigger("deselected");
        }
      };

      NodeModel.prototype.select = function() {
        return this.set("selected", true);
      };

      NodeModel.prototype.deselect = function() {
        return this.set("selected", false);
      };

      return NodeModel;

    })(Backbone.Model);
    models.ConnectorModel = (function(_super) {

      __extends(ConnectorModel, _super);

      function ConnectorModel() {
        return ConnectorModel.__super__.constructor.apply(this, arguments);
      }

      ConnectorModel.prototype.defaults = {
        name: "",
        title: ""
      };

      ConnectorModel.prototype.set_node = function(node) {
        this.node = node;
      };

      ConnectorModel.prototype.set_position = function(position) {
        this.position = position;
      };

      return ConnectorModel;

    })(Backbone.Model);
    models.LeftConnectorModel = (function(_super) {

      __extends(LeftConnectorModel, _super);

      function LeftConnectorModel() {
        return LeftConnectorModel.__super__.constructor.apply(this, arguments);
      }

      return LeftConnectorModel;

    })(models.ConnectorModel);
    models.RightConnectorModel = (function(_super) {

      __extends(RightConnectorModel, _super);

      function RightConnectorModel() {
        return RightConnectorModel.__super__.constructor.apply(this, arguments);
      }

      return RightConnectorModel;

    })(models.ConnectorModel);
    return models.ConnectionModel = (function(_super) {

      __extends(ConnectionModel, _super);

      function ConnectionModel() {
        return ConnectionModel.__super__.constructor.apply(this, arguments);
      }

      ConnectionModel.prototype["default"] = {
        start: null,
        end: null
      };

      return ConnectionModel;

    })(Backbone.Model);
  });

  define(['revigred.models.NodeModel', 'revigred.models.LeftConnectorModel', 'revigred.models.RightConnectorModel'], function() {
    var coll, models;
    coll = namespace("revigred.collections");
    models = namespace("revigred.models");
    coll.NodesList = (function(_super) {

      __extends(NodesList, _super);

      function NodesList() {
        return NodesList.__super__.constructor.apply(this, arguments);
      }

      NodesList.prototype.model = models.NodeModel;

      return NodesList;

    })(Backbone.Collection);
    coll.ConnectorsList = (function(_super) {

      __extends(ConnectorsList, _super);

      function ConnectorsList() {
        return ConnectorsList.__super__.constructor.apply(this, arguments);
      }

      return ConnectorsList;

    })(Backbone.Collection);
    coll.LeftConnectorsList = (function(_super) {

      __extends(LeftConnectorsList, _super);

      function LeftConnectorsList() {
        return LeftConnectorsList.__super__.constructor.apply(this, arguments);
      }

      LeftConnectorsList.prototype.model = models.LeftConnectorModel;

      return LeftConnectorsList;

    })(coll.ConnectorsList);
    return coll.RightConnectorsList = (function(_super) {

      __extends(RightConnectorsList, _super);

      function RightConnectorsList() {
        return RightConnectorsList.__super__.constructor.apply(this, arguments);
      }

      RightConnectorsList.prototype.model = models.RightConnectorModel;

      return RightConnectorsList;

    })(coll.ConnectorsList);
  });

  define([], function() {
    var root, _isinstance;
    root = this;
    _isinstance = function() {
      var t, type, types, _i, _len;
      t = arguments[0], types = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        if (type === t) {
          return true;
        }
      }
      if (t.__proto__ != null) {
        return _isinstance.apply(null, [t.__proto__].concat(__slice.call(types)));
      }
      return false;
    };
    root.isinstance = function() {
      var type, types, value;
      value = arguments[0], types = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      types = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = types.length; _i < _len; _i++) {
          type = types[_i];
          _results.push(type.prototype);
        }
        return _results;
      })();
      return _isinstance.apply(null, [value].concat(__slice.call(types)));
    };
    return root.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
      return window.setTimeout(callback, 20);
    };
  });

  define(["Backbone.View"], function() {
    var RectangularSelector, math, views;
    views = namespace("revigred.views");
    math = namespace("revigred.math");
    RectangularSelector = (function(_super) {

      __extends(RectangularSelector, _super);

      function RectangularSelector() {
        return RectangularSelector.__super__.constructor.apply(this, arguments);
      }

      RectangularSelector.prototype.setup = function(x, y) {
        this.x = x;
        this.y = y;
        this.$el.show();
        this.position = this.$el.offset();
        return this.update(this.x, this.y);
      };

      RectangularSelector.prototype.render = function() {
        var _this = this;
        this.el = this.make("div", {
          "class": "selector"
        });
        this.rect = this.make("div", {
          "class": "rectangle ui-state-highlight"
        });
        this.$rect = $(this.rect);
        this.$el = $(this.el).hide().append(this.$rect).mouseup(function(event) {
          _this.$el.hide();
          if (typeof _this.on_done === "function") {
            _this.on_done();
          }
          return false;
        }).mousemove(function(event) {
          _this.update(event.pageX, event.pageY);
          return false;
        });
        return this;
      };

      RectangularSelector.prototype.update = function(x, y) {
        var rect;
        rect = new math.Rect(this.x - this.position.left, this.y - this.position.top, x - this.position.left, y - this.position.top);
        this.$rect.css("left", rect.min_x).css("top", rect.min_y).css("width", rect.width).css("height", rect.height);
        return typeof this.on_changed === "function" ? this.on_changed(rect) : void 0;
      };

      RectangularSelector.prototype.changed = function(on_changed) {
        this.on_changed = on_changed;
        return this;
      };

      return RectangularSelector;

    })(Backbone.View);
    views.GraphView = (function(_super) {

      __extends(GraphView, _super);

      GraphView.prototype.dragging = false;

      function GraphView(options) {
        GraphView.__super__.constructor.call(this, options);
        this.selector = new RectangularSelector().changed(_.bind(this._on_selection_rect_changed, this));
      }

      GraphView.prototype.events = {
        "mouseup": "_on_mouseup",
        "mousedown": "_on_mousedown",
        "mousemove": "_on_mousemove",
        "click": "_on_click"
      };

      GraphView.prototype._on_selection_rect_changed = function(rect) {
        var added, removed, selected, _i, _j, _len, _len1, _ref, _ref1;
        selected = this.model.nodes.filter(function(node) {
          return rect.intersect(node.bounds());
        });
        _ref = _.difference(selected, this._rect_selected);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          added = _ref[_i];
          added.select();
        }
        _ref1 = _.difference(this._rect_selected, selected);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          removed = _ref1[_j];
          removed.deselect();
        }
        return this._rect_selected = selected;
      };

      GraphView.prototype._on_mousedown = function(event) {
        if (event.shiftKey) {
          this._rect_selected = [];
          this.selector.setup(event.pageX, event.pageY);
        } else {
          this.dragging = {
            x: event.pageX,
            y: event.pageY
          };
          this.$el.addClass("global-drag");
        }
        return false;
      };

      GraphView.prototype._on_mousemove = function(event) {
        var new_pos, x_offset, y_offset;
        if (this.dragging) {
          new_pos = {
            x: event.pageX,
            y: event.pageY
          };
          x_offset = new_pos.x - this.dragging.x;
          y_offset = new_pos.y - this.dragging.y;
          this.model.nodes.forEach(function(node) {
            node.positioner(node.get("x") + x_offset, node.get("y") + y_offset);
            return false;
          });
          return this.dragging = new_pos;
        }
      };

      GraphView.prototype._on_mouseup = function(event) {
        this.model.drop_start();
        this.dragging = null;
        return this.$el.removeClass("global-drag");
      };

      GraphView.prototype._on_click = function(event) {
        var node, _i, _len, _ref;
        if (!event.ctrlKey) {
          _ref = this.model.get_selected();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            node.deselect();
          }
          return false;
        }
      };

      GraphView.prototype.render = function(callback) {
        var nodes;
        this.callback = callback;
        this.$el.append(this.selector.render().el).disableSelection();
        nodes = new views.NodesView({
          model: this.model.nodes,
          el: this.el
        });
        nodes.render();
        this.$canvas = this.$("canvas");
        this.canvas = this.$canvas[0];
        this.context = this.canvas.getContext("2d");
        $(window).resize(_.bind(this.resize, this));
        this.resize();
        return this.draw();
      };

      GraphView.prototype.resize = function() {
        this.canvas.width = this.$el.innerWidth();
        return this.canvas.height = this.$el.innerHeight();
      };

      GraphView.prototype.draw = function() {
        requestAnimationFrame(_.bind(this.draw, this));
        if (typeof this.callback === "function") {
          this.callback();
        }
        return this.context.clearRect(0, 0, this.$el.innerWidth(), this.$el.innerHeight());
      };

      return GraphView;

    })(Backbone.View);
    views.NodesView = (function(_super) {

      __extends(NodesView, _super);

      function NodesView(options) {
        NodesView.__super__.constructor.call(this, options);
        this.model.on('add', this.addOne, this);
        this.model.on('reset', this.addAll, this);
      }

      NodesView.prototype.addAll = function() {
        return this.model.forEach(this.addOne, this);
      };

      NodesView.prototype.addOne = function(connector) {
        var view;
        view = new views.NodeView({
          model: connector
        });
        return this.$el.append(view.render().el);
      };

      NodesView.prototype.render = function() {
        this.addAll();
        return this;
      };

      return NodesView;

    })(Backbone.View);
    views.NodeView = (function(_super) {

      __extends(NodeView, _super);

      NodeView.prototype.tagName = 'div';

      NodeView.prototype.className = 'node ui-widget ui-widget-content ui-corner-all';

      NodeView.prototype.old_pos = null;

      NodeView.prototype.dragged = null;

      function NodeView(options) {
        NodeView.__super__.constructor.call(this, options);
        this.model.set_bounds(_.bind(this.bounds, this));
        this.model.set_positioner(_.bind(this.positioner, this));
        this.model.on('selected', this.select, this);
        this.model.on('deselected', this.deselect, this);
        this.model.on('change:x', this._x_changed, this);
        this.model.on('change:y', this._y_changed, this);
      }

      NodeView.prototype.events = {
        "click": "_on_click",
        "hover": "_on_hover",
        "mousedown": "_on_mousedown",
        "click .ui-widget-header": "_on_header_click"
      };

      NodeView.prototype._on_click = function(event) {
        var node, _i, _len, _ref;
        if (event.ctrlKey) {
          if (this.model.get("selected")) {
            this.model.deselect();
          } else {
            this.model.select();
          }
        } else {
          _ref = this.model.graph.get_selected();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            node.deselect();
          }
          this.model.select();
        }
        return false;
      };

      NodeView.prototype._on_header_click = function(event) {
        if (this.dragged) {
          this.dragged = null;
          return event.stopPropagation();
        }
      };

      NodeView.prototype._on_hover = function(event) {
        return this.$el.toggleClass("ui-state-hover");
      };

      NodeView.prototype._on_mousedown = function(event) {
        if (event.shiftKey) {
          return true;
        }
        return event.stopPropagation();
      };

      NodeView.prototype.positioner = function(x, y) {
        this.$el.css("left", x);
        this.$el.css("top", y);
        this.model.set("x", x, {
          silent: true
        });
        return this.model.set("y", y, {
          silent: true
        });
      };

      NodeView.prototype._x_changed = function(node, value) {
        return this.$el.css("left", value);
      };

      NodeView.prototype._y_changed = function(node, value) {
        return this.$el.css("top", value);
      };

      NodeView.prototype.select = function() {
        return this.$el.addClass("node-selected");
      };

      NodeView.prototype.deselect = function() {
        return this.$el.removeClass("node-selected");
      };

      NodeView.prototype.render = function() {
        var left, right,
          _this = this;
        left = new views.LeftConnectorsView({
          model: this.model.left
        });
        right = new views.RightConnectorsView({
          model: this.model.right
        });
        this.header = this.make("div", {
          "class": "ui-widget-header ui-corner-top"
        }, this.model.title);
        this.$el.draggable({
          handle: ".ui-widget-header",
          scroll: false,
          stack: ".node",
          start: function(event, ui) {
            if (event.shiftKey) {
              return false;
            }
            if (!_this.model.get("selected")) {
              return false;
            }
            $(_this.header).addClass("ui-state-active");
            _this.old_pos = {
              x: _this.el.offsetLeft,
              y: _this.el.offsetTop
            };
            return _this.dragged = true;
          },
          drag: function(event, ui) {
            var new_pos, node, x_offset, y_offset, _i, _len, _ref;
            new_pos = {
              x: _this.el.offsetLeft,
              y: _this.el.offsetTop
            };
            x_offset = new_pos.x - _this.old_pos.x;
            y_offset = new_pos.y - _this.old_pos.y;
            _ref = _this.model.graph.selection;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              node = _ref[_i];
              if (node !== _this.model) {
                node.positioner(node.get("x") + x_offset, node.get("y") + y_offset);
              }
            }
            _this.old_pos = new_pos;
            _this.model.set("x", _this.old_pos.x, {
              silent: true
            });
            return _this.model.set("y", _this.old_pos.y, {
              silent: true
            });
          },
          stop: function(event, ui) {
            _this.old_pos = null;
            return $(_this.header).removeClass("ui-state-active");
          }
        }).css("left", this.model.get("x")).css("top", this.model.get("y")).css("position", "absolute").append(this.header).append(left.render().el).append(right.render().el).disableSelection();
        return this;
      };

      NodeView.prototype.create_constrols = function() {
        var container;
        container = this.make("div", {
          "class": "controls-container"
        });
        return container;
      };

      NodeView.prototype.bounds = function() {
        var x0, x1, y0, y1;
        x0 = this.el.offsetLeft;
        y0 = this.el.offsetTop;
        x1 = x0 + this.el.offsetWidth;
        y1 = y0 + this.el.offsetHeight;
        return new math.Rect(x0, y0, x1, y1);
      };

      return NodeView;

    })(Backbone.View);
    views.ConnectorsView = (function(_super) {

      __extends(ConnectorsView, _super);

      ConnectorsView.prototype.tagName = 'ui';

      function ConnectorsView(options) {
        ConnectorsView.__super__.constructor.call(this, options);
        this.model.on('add', this.addOne, this);
        this.model.on('reset', this.addAll, this);
      }

      ConnectorsView.prototype.addAll = function() {
        return this.model.forEach(this.addOne, this);
      };

      ConnectorsView.prototype.render = function() {
        this.addAll();
        return this;
      };

      return ConnectorsView;

    })(Backbone.View);
    views.LeftConnectorsView = (function(_super) {

      __extends(LeftConnectorsView, _super);

      function LeftConnectorsView() {
        return LeftConnectorsView.__super__.constructor.apply(this, arguments);
      }

      LeftConnectorsView.prototype.className = 'left-connectors';

      LeftConnectorsView.prototype.addOne = function(connector) {
        var view;
        view = new views.LeftConnectorView({
          model: connector
        });
        return this.$el.append(view.render().el);
      };

      return LeftConnectorsView;

    })(views.ConnectorsView);
    views.RightConnectorsView = (function(_super) {

      __extends(RightConnectorsView, _super);

      function RightConnectorsView() {
        return RightConnectorsView.__super__.constructor.apply(this, arguments);
      }

      RightConnectorsView.prototype.className = 'right-connectors';

      RightConnectorsView.prototype.render = function() {
        RightConnectorsView.__super__.render.call(this);
        this.$el.attr("dir", "rtl");
        return this;
      };

      RightConnectorsView.prototype.addOne = function(connector) {
        var view;
        view = new views.RightConnectorView({
          model: connector
        });
        return this.$el.append(view.render().el);
      };

      return RightConnectorsView;

    })(views.ConnectorsView);
    views.ConnectorView = (function(_super) {

      __extends(ConnectorView, _super);

      ConnectorView.prototype.tagName = 'li';

      ConnectorView.prototype.className = 'connector ui-state-default';

      function ConnectorView(options) {
        ConnectorView.__super__.constructor.call(this, options);
        this.model.set_position(_.bind(this.pos, this));
      }

      ConnectorView.prototype.events = {
        "mousedown": "_on_mousedown",
        "mouseup": "_on_mouseup",
        "hover": "_on_hover"
      };

      ConnectorView.prototype._on_mousedown = function(event) {
        var _ref;
        if (event.shiftKey) {
          return true;
        }
        if ((_ref = this.model.node.graph) != null) {
          _ref.pick_start(this.model);
        }
        return false;
      };

      ConnectorView.prototype._on_mouseup = function(event) {
        var _ref;
        if ((_ref = this.model.node.graph) != null) {
          _ref.pick_end(this.model);
        }
        return false;
      };

      ConnectorView.prototype._on_hover = function(event) {
        return this.$el.toggleClass("ui-state-highlight").toggleClass("ui-state-default");
      };

      ConnectorView.prototype.render = function() {
        this.$el.text(this.model.get("title"));
        return this;
      };

      return ConnectorView;

    })(Backbone.View);
    views.LeftConnectorView = (function(_super) {

      __extends(LeftConnectorView, _super);

      function LeftConnectorView() {
        return LeftConnectorView.__super__.constructor.apply(this, arguments);
      }

      LeftConnectorView.prototype.className = 'connector ui-state-default ui-corner-left';

      LeftConnectorView.prototype.pos = function() {
        var pos, x0, x1, y0, y1;
        pos = this.$el.offset();
        x0 = pos.left;
        y0 = pos.top + this.$el.outerHeight() / 2;
        x1 = x0 - 50;
        y1 = y0;
        return new math.Segment(new math.Vector(x0, y0), new math.Vector(x1, y1));
      };

      return LeftConnectorView;

    })(views.ConnectorView);
    return views.RightConnectorView = (function(_super) {

      __extends(RightConnectorView, _super);

      function RightConnectorView() {
        return RightConnectorView.__super__.constructor.apply(this, arguments);
      }

      RightConnectorView.prototype.className = 'connector ui-state-default ui-corner-right';

      RightConnectorView.prototype.pos = function() {
        var pos, x0, x1, y0, y1;
        pos = this.$el.offset();
        x0 = pos.left + this.$el.outerWidth();
        y0 = pos.top + this.$el.outerHeight() / 2;
        x1 = x0 + 50;
        y1 = y0;
        return new math.Segment(new math.Vector(x0, y0), new math.Vector(x1, y1));
      };

      return RightConnectorView;

    })(views.ConnectorView);
  });

}).call(this);
